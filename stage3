from random import randint, random
from pathlib import Path

from scipy.stats import truncnorm
from PIL import Image
import numpy as np

def replace_color(image, color, target):
    data = np.array(image)   # "data" is a height x width x 4 numpy array
    r, g, b = color
    red, green, blue, alpha = data.T
    areas = (red == r) & (blue == g) & (green == b)
    data[..., :-1][areas.T] = target # Transpose back needed
    return Image.fromarray(data)


root = Path.home() / 'Desktop/images/transparent2'

alphabets = []
for file in root.iterdir():
    image = Image.open(file)
    alphabets.append(image)


canvas = Image.new('RGBA', (1024, 1024), (255, 255, 255, 255))

for _ in range(60):
    image = alphabets[randint(0, len(alphabets) - 1)].copy()

    image = replace_color(image, (0, 0, 0), (int(random() * 255), int(random() * 255), int(random() * 255)))
    image = image.rotate(random() * 360, expand=True)

    w, h = image.size
    aspect = w / h
    new_w = w * (random() * 1.5 + 0.5)
    new_h = new_w / aspect
    image = image.resize((int(new_w), int(new_h)))

    cw, ch = canvas.size

    f = 0.75
    mw = cw * (1 - f) / 2
    mh = ch * (1 - f) / 2
    x = (truncnorm.rvs(-1, 1, loc=0, scale=1) + 1) / 2 * cw / 2 + mw
    y = (truncnorm.rvs(-1, 1, loc=0, scale=1) + 1) / 2 * ch / 2 + mh
    canvas.paste(image, (int(x), int(y)), image)

canvas.show()
image=image.convert("RGB")
image.save("test.jpg")
