import cv2
#reading the image 
image = cv2.imread("NewIbrahim.jpg")
edged = cv2.Canny(image, 10, 250)
cv2.imshow("Edges", edged)
cv2.waitKey(0)




def jas104 (xyz):
    
    gray=cv2.cvtColor(xyz,cv2.COLOR_BGR2GRAY)
    edged = cv2.Canny(xyz, 10, 250)
    (cnts, _) = cv2.findContours(edged.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    idx = 0
    for c in cnts:
            x,y,w,h = cv2.boundingRect(c)
            if w>50 and h>50:
                    idx+=1
                    new_img=image[y:y+h,x:x+w]
                    cv2.imwrite(str(idx) + '.png', new_img)
    cv2.imshow("im",image)
    cv2.waitKey(0)

def transform(pos):
# This function is used to find the corners of the object
# and the dimensions of the object
	pts=[]
	n=len(pos)
	for i in range(n):
		pts.append(list(pos[i][0]))
		
	sums={}
	diffs={}
	tl=tr=bl=br=0
	for i in pts:
		x=i[0]
		y=i[1]
		sum=x+y
		diff=y-x
		sums[sum]=i
		diffs[diff]=i
	sums=sorted(sums.items())
	diffs=sorted(diffs.items())
	n=len(sums)
	rect=[sums[0][1],diffs[0][1],diffs[n-1][1],sums[n-1][1]]
	#	   top-left   top-right   bottom-left   bottom-right
	
	h1=np.sqrt((rect[0][0]-rect[2][0])**2 + (rect[0][1]-rect[2][1])**2)		#height of left side
	h2=np.sqrt((rect[1][0]-rect[3][0])**2 + (rect[1][1]-rect[3][1])**2)		#height of right side
	h=max(h1,h2)
	
	w1=np.sqrt((rect[0][0]-rect[1][0])**2 + (rect[0][1]-rect[1][1])**2)		#width of upper side
	w2=np.sqrt((rect[2][0]-rect[3][0])**2 + (rect[2][1]-rect[3][1])**2)		#width of lower side
	w=max(w1,w2)
	
	return int(w),int(h),rect

#applying closing function 
kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (7, 7))
closed = cv2.morphologyEx(edged, cv2.MORPH_CLOSE, kernel)
cv2.imshow("Closed", closed)
cv2.waitKey(0)






#finding_contours 
(cnts, _) = cv2.findContours(closed.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
 
for c in cnts:
	peri = cv2.arcLength(c, True)
	approx = cv2.approxPolyDP(c, 0.02 * peri, True)
	cv2.drawContours(image, [approx], -1, (0, 0, 0), 2)
cv2.imshow("Output", image)
cv2.waitKey(0)



jas104(image)
